{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wkariuki/Development/code/phase-2/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotSpecs from \"./BotSpecs\";\n\nfunction BotsPage() {\n  _s();\n\n  const [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null); // Function to handle adding a bot to the army\n\n  const addToArmy = bot => {\n    if (!botArmy.some(armyBot => armyBot.id === bot.id)) {\n      setBotArmy([...botArmy, bot]);\n    }\n  }; // Function to handle removing a bot from the army\n\n\n  const removeFromArmy = botId => {\n    const updatedBotArmy = botArmy.filter(bot => bot.id !== botId);\n    setBotArmy(updatedBotArmy);\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:8002/bots\").then(response => response.json()).then(data => setBots(data));\n  }, []); // Function to handle selecting a bot\n\n  const handleSelectBot = bot => {\n    setSelectedBot(bot);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: botArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      addToArmy: addToArmy,\n      removeFromArmy: removeFromArmy,\n      onSelectBot: handleSelectBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), selectedBot && /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BotsPage, \"UtM85gkojkCaF3HStJor0RpW/gs=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"sources":["/home/wkariuki/Development/code/phase-2/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js"],"names":["React","useState","useEffect","YourBotArmy","BotCollection","BotSpecs","BotsPage","bots","setBots","botArmy","setBotArmy","selectedBot","setSelectedBot","addToArmy","bot","some","armyBot","id","removeFromArmy","botId","updatedBotArmy","filter","fetch","then","response","json","data","handleSelectBot"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAO,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,IAAD,CAA9C,CAHkB,CAKlB;;AACA,QAAMY,SAAS,GAAIC,GAAD,IAAS;AACzB,QAAI,CAACL,OAAO,CAACM,IAAR,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeH,GAAG,CAACG,EAA7C,CAAL,EAAuD;AACrDP,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaK,GAAb,CAAD,CAAV;AACD;AACF,GAJD,CANkB,CAYlB;;;AACA,QAAMI,cAAc,GAAIC,KAAD,IAAW;AAChC,UAAMC,cAAc,GAAGX,OAAO,CAACY,MAAR,CAAgBP,GAAD,IAASA,GAAG,CAACG,EAAJ,KAAWE,KAAnC,CAAvB;AACAT,IAAAA,UAAU,CAACU,cAAD,CAAV;AACD,GAHD;;AAKAlB,EAAAA,SAAS,CAAE,MAAM;AACfoB,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIlB,OAAO,CAACkB,IAAD,CAFrB;AAGD,GAJQ,EAIP,EAJO,CAAT,CAlBkB,CAuBnB;;AACA,QAAMC,eAAe,GAAIb,GAAD,IAAS;AAChCF,IAAAA,cAAc,CAACE,GAAD,CAAd;AACD,GAFA;;AAGC,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAIL;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAIF,IAAvB;AAA6B,MAAA,SAAS,EAAIM,SAA1C;AAAqD,MAAA,cAAc,EAAEK,cAArE;AAAsF,MAAA,WAAW,EAAES;AAAnG;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGhB,WAAW,iBAAI,QAAC,QAAD;AAAU,MAAA,GAAG,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlCQL,Q;;KAAAA,Q;AAoCT,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotSpecs from \"./BotSpecs\";\n\n\nfunction BotsPage() {\n  const  [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null); \n\n  // Function to handle adding a bot to the army\n  const addToArmy = (bot) => {\n    if (!botArmy.some((armyBot) => armyBot.id === bot.id)) {\n      setBotArmy([...botArmy, bot]);\n    }\n  };\n\n  // Function to handle removing a bot from the army\n  const removeFromArmy = (botId) => {\n    const updatedBotArmy = botArmy.filter((bot) => bot.id !== botId);\n    setBotArmy(updatedBotArmy);\n  };\n\n  useEffect (() => {\n    fetch(\"http://localhost:8002/bots\")\n    .then(response => response.json())\n    .then(data => setBots(data));\n  },[]);\n // Function to handle selecting a bot\n const handleSelectBot = (bot) => {\n  setSelectedBot(bot);\n};\n  return (\n    <div>\n      <YourBotArmy bots = {botArmy}/>\n      <BotCollection bots = {bots} addToArmy = {addToArmy} removeFromArmy={removeFromArmy}  onSelectBot={handleSelectBot}/>\n      {selectedBot && <BotSpecs bot={selectedBot} />}\n    </div>\n  )\n}\n\nexport default BotsPage;\n"]},"metadata":{},"sourceType":"module"}