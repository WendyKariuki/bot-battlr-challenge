{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wkariuki/Development/code/phase-2/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\"; // import BotSpecs from \"./BotSpecs\";\n\nfunction BotsPage() {\n  _s();\n\n  const [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]); // Function to handle adding a bot to the army\n\n  const addToArmy = bot => {\n    if (!botArmy.some(armyBot => armyBot.id === bot.id)) {\n      setBotArmy([...botArmy, bot]);\n    }\n  }; // Function to handle removing a bot from the army\n\n\n  const removeFromArmy = botId => {\n    const updatedBotArmy = botArmy.filter(bot => bot.id !== botId);\n    setBotArmy(updatedBotArmy);\n  };\n\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8002/bots\");\n      const data = await response.json();\n      setBots(data);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: botArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      addToArmy: addToArmy,\n      removeFromArmy: removeFromArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BotsPage, \"d+K5VIAavQRbiGkfY1a5I9Cs7oE=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"sources":["/home/wkariuki/Development/code/phase-2/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js"],"names":["React","useState","useEffect","YourBotArmy","BotCollection","BotsPage","bots","setBots","botArmy","setBotArmy","addToArmy","bot","some","armyBot","id","removeFromArmy","botId","updatedBotArmy","filter","getUsers","response","fetch","data","json","error","console"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAO,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAFkB,CAIlB;;AACA,QAAMS,SAAS,GAAIC,GAAD,IAAS;AACzB,QAAI,CAACH,OAAO,CAACI,IAAR,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeH,GAAG,CAACG,EAA7C,CAAL,EAAuD;AACrDL,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaG,GAAb,CAAD,CAAV;AACD;AACF,GAJD,CALkB,CAWlB;;;AACA,QAAMI,cAAc,GAAIC,KAAD,IAAW;AAChC,UAAMC,cAAc,GAAGT,OAAO,CAACU,MAAR,CAAgBP,GAAD,IAASA,GAAG,CAACG,EAAJ,KAAWE,KAAnC,CAAvB;AACAP,IAAAA,UAAU,CAACQ,cAAD,CAAV;AACD,GAHD;;AAKA,QAAME,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAhB,MAAAA,OAAO,CAACe,IAAD,CAAP;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD;AACF,GARD;;AAUAtB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAIX;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAIF,IAAvB;AAA6B,MAAA,SAAS,EAAII,SAA1C;AAAqD,MAAA,cAAc,EAAEK;AAArE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA1CQV,Q;;KAAAA,Q;AA4CT,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n// import BotSpecs from \"./BotSpecs\";\n\n\nfunction BotsPage() {\n  const  [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]);\n\n  // Function to handle adding a bot to the army\n  const addToArmy = (bot) => {\n    if (!botArmy.some((armyBot) => armyBot.id === bot.id)) {\n      setBotArmy([...botArmy, bot]);\n    }\n  };\n\n  // Function to handle removing a bot from the army\n  const removeFromArmy = (botId) => {\n    const updatedBotArmy = botArmy.filter((bot) => bot.id !== botId);\n    setBotArmy(updatedBotArmy);\n  };\n\n  const getUsers = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8002/bots\");\n      const data = await response.json();\n      setBots(data);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n  \n  useEffect(() => {\n    getUsers();\n  }, []);\n  \n\n  return (\n    <div>\n      <YourBotArmy bots = {botArmy}/>\n      <BotCollection bots = {bots} addToArmy = {addToArmy} removeFromArmy={removeFromArmy}/>\n      {/* <BotSpecs addToArmy={addToArmy} /> */}\n\n      \n\n    </div>\n  )\n}\n\nexport default BotsPage;"]},"metadata":{},"sourceType":"module"}